import {FC, useEffect, useState} from 'react'
import s from './Clock.module.scss'

//========================================================================================
// üé≤ .T.Y.P.E.S.

export type ClockPropsType = {
    format: boolean
}

//========================================================================================
// üßÅ .C.O.P.O.N.E.N.T.

export const Clock: FC<ClockPropsType> = (props) => {

    const [date, setDate] = useState(new Date())

    useEffect(() => {

        const intervalId = setInterval(() => {
            setDate(new Date())
        }, 1000)

        // –¥–∞–∂–µ –∫–æ–≥–¥–∞ –º—ã —Ä–∞–∑–º–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É =>
        // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å—á–∏—Ç–∞—Ç—å

        // => –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
        // –æ—Å—Ç–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ–∏—Ç –≤—ã–∑–≤–∞–Ω–∞
        // –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–º—Ä–µ—Ç –∏–ª–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–∞

        return () => {
            // –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∏–Ω—Ç–µ—Ä–≤–∞
            clearInterval(intervalId)
        }

    }, [])

    function clockFormatter(time: number) {
        return time.toString().padStart(2, '0')
    }


    const hours = clockFormatter(date.getHours())
    const minutes = clockFormatter(date.getMinutes())
    const seconds = clockFormatter(date.getSeconds())

    // const [hoursMath, setHoursMath] = useState(0)
    // const [minutesMath, setMinutesMath] = useState(0)
    // const [secondsMath, setSecondsMath] = useState(0)
    //
    //
    // useEffect(() => {
    //     setHoursMath(-90 + date.getHours() * 15)
    //     setMinutesMath(-90 + date.getMinutes() * 6)
    //     setSecondsMath(-90 + date.getSeconds() * 6)
    // }, [date])

    return (
        <div className={s.clock}>

            {props.format ?
                <div className={s.digital}>
                    <span>{hours}</span>
                    :
                    <span>{minutes}</span>
                    :
                    <span>{seconds}</span>
                </div>
                :
                <div className={s.analog}>
                    <span
                        className={s.hoursArrow}
                        style={{transform: `translateY(-50%) rotate(${-90 + date.getHours() * 15}deg)`}}
                    ></span>
                    <span
                        className={s.minutesArrow}
                        style={{transform: `translateY(-50%) rotate(${-90 + date.getMinutes() * 6}deg)`}}
                    ></span>
                    <span
                        className={s.secondsArrow}
                        style={{transform: `translateY(-50%) rotate(${-90 + date.getSeconds() * 6}deg)`}}
                    ></span>
                </div>
            }

        </div>
    )
}